from enum import Enum
import sqlite3
import copy

DATA_FILE_NAME = "scouting_data.txt"
DB_FILE_NAME = "db.sqlite3"

TEAMS = [
    86,
    88,
    118,
    254,
    316,
    364,
    401,
    498,
    599,
    694,
    846,
    857,
    1023,
    1477,
    1506,
    1619,
    1629,
    1731,
    1732,
    1745,
    1756,
    1771,
    1816,
    1828,
    1868,
    1914,
    1918,
    2147,
    2168,
    2438,
    2481,
    2506,
    2556,
    2557,
    2586,
    2590,
    2601,
    2638,
    2687,
    2959,
    2960,
    2974,
    3166,
    3175,
    3256,
    3414,
    3459,
    3476,
    3504,
    3641,
    3937,
    3970,
    4135,
    4329,
    4381,
    4415,
    4786,
    5086,
    5089,
    5114,
    5422,
    5612,
    5705,
    5724,
    5809,
    5903,
    6413,
    6672,
    7541,
    8122,
    8153,
    8546,
    8573,
    8590,
    8841,
    8898,
]

MATCHES = {
    1: [2959, 2481, 2590, 8898, 5705, 2506],
    2: [5612, 1745, 118, 86, 4329, 1756],
    3: [3256, 3414, 5114, 6413, 3476, 4381],
    4: [2168, 2638, 2147, 3970, 2438, 2601],
    5: [2556, 5422, 5089, 1477, 5809, 6672],
    6: [1918, 3504, 857, 8841, 8122, 4415],
    7: [316, 1816, 401, 2974, 254, 2586],
    8: [3459, 3937, 1732, 599, 8546, 2557],
    9: [5724, 364, 498, 1023, 2687, 4135],
    10: [4786, 8590, 1828, 88, 3175, 3166],
    11: [1506, 1868, 1629, 846, 8153, 2960],
    12: [3641, 1619, 694, 1771, 1731, 5086],
    13: [5903, 7541, 2147, 1914, 8573, 2506],
    14: [4329, 8841, 118, 2481, 2438, 5809],
    15: [3970, 1816, 86, 4415, 2556, 8898],
    16: [2601, 5114, 5612, 3459, 401, 1918],
    17: [1477, 857, 364, 2590, 2638, 3256],
    18: [3504, 1023, 6413, 5089, 254, 3175],
    19: [3414, 2168, 1506, 4786, 1868, 599],
    20: [694, 4135, 2974, 3641, 2959, 4381],
    21: [5903, 1732, 2960, 1828, 498, 3476],
    22: [7541, 8590, 2586, 1629, 2687, 3937],
    23: [3166, 5724, 5086, 8546, 8573, 5422],
    24: [1745, 1756, 8153, 88, 1619, 8122],
    25: [846, 1914, 316, 5705, 6672, 2557],
    26: [1731, 1918, 118, 2590, 1771, 254],
    27: [4415, 2601, 3459, 5089, 3414, 2481],
    28: [694, 2506, 2556, 857, 6413, 2168],
    29: [401, 1023, 86, 1828, 599, 2959],
    30: [1732, 7541, 1506, 3970, 4381, 3175],
    31: [2687, 2960, 3476, 3504, 4786, 4329],
    32: [3937, 2147, 8153, 5422, 5612, 3256],
    33: [5809, 8122, 1914, 5086, 2974, 1629],
    34: [5114, 8573, 846, 498, 1756, 3641],
    35: [88, 1477, 8841, 364, 1771, 5705],
    36: [1731, 2638, 5724, 2557, 5903, 8590],
    37: [8898, 3166, 8546, 1868, 316, 1619],
    38: [2586, 6672, 1816, 2438, 4135, 1745],
    39: [3414, 401, 2556, 118, 2506, 1732],
    40: [3256, 4786, 1918, 2481, 86, 3504],
    41: [1914, 8153, 6413, 2590, 599, 3970],
    42: [8122, 2168, 5086, 2687, 2147, 254],
    43: [846, 5089, 3641, 4329, 3937, 1828],
    44: [2601, 1771, 5422, 498, 5903, 857],
    45: [8573, 8898, 2974, 2557, 3476, 364],
    46: [3175, 1477, 1868, 2586, 3459, 1731],
    47: [1629, 5114, 2959, 5612, 88, 2438],
    48: [4135, 4415, 7541, 3166, 1619, 2960],
    49: [5705, 1756, 4381, 5809, 8546, 2638],
    50: [8590, 1745, 8841, 1506, 316, 1023],
    51: [1816, 694, 2168, 6672, 1828, 5724],
    52: [3937, 2481, 4786, 254, 8153, 498],
    53: [8898, 846, 6413, 2974, 1918, 1732],
    54: [2557, 3970, 4329, 5422, 2590, 3414],
    55: [1868, 401, 3504, 5086, 2438, 8573],
    56: [8122, 5612, 5089, 364, 5903, 4135],
    57: [1771, 3175, 2687, 8546, 86, 5114],
    58: [3256, 2960, 1731, 8841, 2959, 2556],
    59: [6672, 4381, 2638, 1619, 1023, 4415],
    60: [5809, 2586, 694, 1506, 8590, 1914],
    61: [1477, 599, 1756, 3166, 2601, 2506],
    62: [3476, 3459, 5705, 857, 1629, 1745],
    63: [118, 88, 316, 5724, 3641, 7541],
    64: [2147, 5089, 1868, 1816, 2590, 2974],
    65: [401, 3970, 8546, 8122, 4135, 846],
    66: [4329, 3256, 5903, 2168, 8898, 3175],
    67: [1619, 86, 5086, 6413, 8841, 498],
    68: [5809, 1023, 8573, 5612, 2960, 1771],
    69: [3166, 4381, 3937, 1918, 2687, 2438],
    70: [1828, 2557, 8153, 2601, 5705, 2586],
    71: [254, 2959, 3414, 1756, 857, 5724],
    72: [599, 2147, 88, 3476, 118, 694],
    73: [2506, 6672, 1745, 5114, 3504, 8590],
    74: [316, 1732, 1629, 1731, 4415, 1477],
    75: [1816, 1506, 2638, 5422, 3641, 2481],
    76: [364, 4786, 3459, 1914, 2556, 7541],
    77: [498, 3166, 5809, 401, 2168, 3256],
    78: [4135, 6413, 5705, 1771, 4329, 8573],
    79: [5086, 3414, 8898, 2586, 5089, 8153],
    80: [694, 254, 2438, 846, 3175, 2557],
    81: [2960, 2974, 2601, 1745, 86, 3937],
    82: [2959, 1619, 1732, 8590, 1918, 2147],
    83: [599, 3641, 2687, 5903, 6672, 8841],
    84: [4415, 2506, 364, 5422, 1731, 1506],
    85: [8546, 857, 1816, 5114, 118, 1914],
    86: [3476, 5612, 1023, 1477, 7541, 2481],
    87: [2590, 1629, 8122, 4381, 5724, 4786],
    88: [1828, 1756, 3970, 316, 3459, 3504],
    89: [2556, 88, 254, 2638, 1868, 4135],
    90: [86, 2168, 1771, 3414, 846, 8590],
    91: [2438, 3256, 2974, 1732, 5705, 599],
    92: [3175, 4415, 2959, 8153, 364, 5809],
    93: [6413, 2557, 1506, 2687, 118, 857],
    94: [5089, 3166, 401, 1745, 1914, 1731],
    95: [3641, 8546, 4329, 1023, 2601, 1629],
    96: [4381, 498, 3504, 2147, 1816, 1477],
    97: [6672, 2590, 88, 2960, 5086, 3459],
    98: [2481, 1918, 2586, 1756, 5903, 2556],
    99: [3937, 5724, 3476, 1868, 8841, 3970],
    100: [7541, 5422, 1828, 8898, 8122, 5114],
    101: [2506, 316, 5612, 2638, 694, 4786],
    102: [1619, 3256, 254, 8573, 1506, 5089],
    103: [8153, 2974, 1023, 2168, 118, 3166],
    104: [2147, 2557, 3641, 1745, 6413, 4415],
    105: [1731, 5809, 2687, 1816, 2601, 88],
    106: [1756, 2481, 1771, 401, 1629, 6672],
    107: [4329, 1914, 857, 1732, 4381, 1868],
    108: [2960, 2586, 599, 364, 3970, 5114],
    109: [3459, 498, 8898, 8590, 694, 8122],
    110: [8573, 2638, 3414, 1918, 3937, 3175],
    111: [8841, 1828, 2438, 2506, 7541, 8546],
    112: [4135, 3476, 2590, 316, 5422, 86],
    113: [5705, 3504, 5724, 5612, 2556, 1619],
    114: [4786, 5086, 5903, 2959, 1477, 846],
    115: [8153, 1506, 6672, 2147, 4329, 401],
    116: [4381, 2557, 2481, 5089, 88, 2168],
    117: [1868, 364, 8590, 2601, 6413, 1756],
    118: [1629, 3970, 1918, 1023, 3256, 1816],
    119: [2974, 8546, 498, 7541, 1731, 3414],
    120: [86, 2506, 3641, 254, 5809, 3459],
    121: [2556, 1745, 8573, 2687, 1828, 2590],
    122: [5705, 5114, 5903, 4415, 694, 3937],
    123: [3175, 599, 5612, 857, 5086, 316],
    124: [2438, 2960, 1477, 5724, 8898, 1914],
    125: [118, 846, 5422, 3504, 2586, 1619],
    126: [3476, 2959, 1771, 2638, 8122, 3166],
    127: [8841, 1732, 2601, 5089, 4786, 4135]
}

matches_missing = copy.deepcopy(MATCHES)


class Match:
    def __init__(self, data_row):
        if len(data_row) < 9:
            raise Exception("bad row")

        self.match_number = int(data_row[1])
        self.team_number = int(data_row[2])
        self.scout_name = data_row[3]
        self.cargo_auto_low = int(data_row[4])
        self.cargo_auto_high = int(data_row[5])
        self.cargo_teleop_low = int(data_row[6])
        self.cargo_teleop_high = int(data_row[7])

        raw_climber = data_row[8].strip()
        if raw_climber == "Did not climb":
            self.climber = 0
        elif raw_climber == "Low Rung":
            self.climber = 1
        elif raw_climber == "Mid Rung":
            self.climber = 2
        elif raw_climber == "High Rung":
            self.climber = 3
        elif raw_climber == "Traversal Rung":
            self.climber = 4
        else:
            raise Exception("bad climber value")

        if self.team_number not in MATCHES[self.match_number]:
            print(
                f"team {self.team_number} is not supposed to be in match {self.match_number}")
        elif self.team_number not in matches_missing[self.match_number]:
            print(
                f"duplicate form for team {self.team_number} in match {self.match_number}")
        else:
            matches_missing[self.match_number].remove(self.team_number)


def main():
    data = {}
    con = sqlite3.connect(DB_FILE_NAME)

    con.execute("DELETE FROM team_match_stats;")
    con.commit()

    with open(DATA_FILE_NAME) as data_file:
        for line in data_file.readlines():
            match = Match(line.split('\t'))
            if data.get(match.team_number) == None:
                data[match.team_number] = []
            data[match.team_number].append(match)

    for d in data.values():
        for m in d:
            statement = f"""
            INSERT INTO team_match_stats (
                team_number, match_type, match_number,
                scout_name, submit_datetime,
                taxi, auto_cargo_low, auto_cargo_high, teleop_cargo_low, teleop_cargo_high, climb_level,
                played_defense, comments)
            VALUES (
                {m.team_number}, 1, {m.match_number},
                \"{m.scout_name}\", 0,
                0, {m.cargo_auto_low}, {m.cargo_auto_high}, {m.cargo_teleop_low}, {m.cargo_teleop_high}, {m.climber},
                0, \"na\"
            );
            """

            con.execute(statement)
            con.commit()
            # print(statement)

            if int(m.team_number) not in TEAMS:
                print("Err!", m.team_number)

    for match, teams in matches_missing.items():
        for team in teams:
            print(f"missing team {team} from match {match}")


if __name__ == "__main__":
    main()
